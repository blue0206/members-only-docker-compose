services:
  #---------------Backend--------------------
  backend:
    build:
      context: ../members-only-backend
      dockerfile: Dockerfile.dev
    ports:
      - "8000:8000"
    volumes:
      - ../members-only-backend/src:/app/src
      - ../members-only-backend/prisma:/app/prisma
    env_file:
      - ../members-only-backend/.env
    networks:
      - members-only
    # Wait for the database to be ready before starting the backend.
    depends_on:
      db:
        condition: service_healthy

  #---------------Frontend--------------------
  frontend:
    build:
      context: ../members-only-frontend
      dockerfile: Dockerfile
    ports:
      - "5173:5173"
    volumes:
      - ../members-only-frontend/src:/app/src
    env_file:
      - ../members-only-frontend/.env.development
    networks:
      - members-only
    # Wait for the backend to be ready before starting the frontend.
    depends_on:
      - backend

  #---------------Database--------------------
  db:
    image: postgres:16
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    # Persist data between container restarts
    volumes:
      - postgres_data:/var/lib/postgresql/data
    # Check if the database is ready
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    # Always restart the database unless stopped by user.
    restart: unless-stopped
    ports:
      - "5432:5432"
    networks:
      - members-only

#---------------Network--------------------
networks:
  members-only:
    driver: bridge

#---------------Volumes--------------------
volumes:
  # Create a volume to store persistent data of db container.
  postgres_data:
